/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ZaapProtocol
{

  public partial class connect_args : TBase
  {
    private string _gameName;
    private string _releaseName;
    private int _instanceId;
    private string _hash;

    public string GameName
    {
      get
      {
        return _gameName;
      }
      set
      {
        __isset.gameName = true;
        this._gameName = value;
      }
    }

    public string ReleaseName
    {
      get
      {
        return _releaseName;
      }
      set
      {
        __isset.releaseName = true;
        this._releaseName = value;
      }
    }

    public int InstanceId
    {
      get
      {
        return _instanceId;
      }
      set
      {
        __isset.instanceId = true;
        this._instanceId = value;
      }
    }

    public string Hash
    {
      get
      {
        return _hash;
      }
      set
      {
        __isset.hash = true;
        this._hash = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool gameName;
      public bool releaseName;
      public bool instanceId;
      public bool hash;
    }

    public connect_args()
    {
    }

    public connect_args DeepCopy()
    {
      var tmp5 = new connect_args();
      if((GameName != null) && __isset.gameName)
      {
        tmp5.GameName = this.GameName;
      }
      tmp5.__isset.gameName = this.__isset.gameName;
      if((ReleaseName != null) && __isset.releaseName)
      {
        tmp5.ReleaseName = this.ReleaseName;
      }
      tmp5.__isset.releaseName = this.__isset.releaseName;
      if(__isset.instanceId)
      {
        tmp5.InstanceId = this.InstanceId;
      }
      tmp5.__isset.instanceId = this.__isset.instanceId;
      if((Hash != null) && __isset.hash)
      {
        tmp5.Hash = this.Hash;
      }
      tmp5.__isset.hash = this.__isset.hash;
      return tmp5;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                GameName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ReleaseName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                InstanceId = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Hash = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp6 = new TStruct("connect_args");
        await oprot.WriteStructBeginAsync(tmp6, cancellationToken);
        var tmp7 = new TField();
        if((GameName != null) && __isset.gameName)
        {
          tmp7.Name = "gameName";
          tmp7.Type = TType.String;
          tmp7.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(GameName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ReleaseName != null) && __isset.releaseName)
        {
          tmp7.Name = "releaseName";
          tmp7.Type = TType.String;
          tmp7.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(ReleaseName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.instanceId)
        {
          tmp7.Name = "instanceId";
          tmp7.Type = TType.I32;
          tmp7.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteI32Async(InstanceId, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Hash != null) && __isset.hash)
        {
          tmp7.Name = "hash";
          tmp7.Type = TType.String;
          tmp7.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp7, cancellationToken);
          await oprot.WriteStringAsync(Hash, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is connect_args other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.gameName == other.__isset.gameName) && ((!__isset.gameName) || (global::System.Object.Equals(GameName, other.GameName))))
        && ((__isset.releaseName == other.__isset.releaseName) && ((!__isset.releaseName) || (global::System.Object.Equals(ReleaseName, other.ReleaseName))))
        && ((__isset.instanceId == other.__isset.instanceId) && ((!__isset.instanceId) || (global::System.Object.Equals(InstanceId, other.InstanceId))))
        && ((__isset.hash == other.__isset.hash) && ((!__isset.hash) || (global::System.Object.Equals(Hash, other.Hash))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((GameName != null) && __isset.gameName)
        {
          hashcode = (hashcode * 397) + GameName.GetHashCode();
        }
        if((ReleaseName != null) && __isset.releaseName)
        {
          hashcode = (hashcode * 397) + ReleaseName.GetHashCode();
        }
        if(__isset.instanceId)
        {
          hashcode = (hashcode * 397) + InstanceId.GetHashCode();
        }
        if((Hash != null) && __isset.hash)
        {
          hashcode = (hashcode * 397) + Hash.GetHashCode();
        }
      }
      return hashcode;
    }
        
    public override string ToString() => $"connect_args(GameName: {GameName}, ReleaseName: {ReleaseName}, InstanceId: {InstanceId}, Hash: {Hash})";
  }

}
