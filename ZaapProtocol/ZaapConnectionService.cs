/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace ZaapProtocol
{
  public partial class ZaapConnectionService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::ZaapProtocol.connect_result> connect(global::ZaapProtocol.connect_args request, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::ZaapProtocol.connect_result> connect(global::ZaapProtocol.connect_args request, CancellationToken cancellationToken = default)
      {
        await send_connect(request, cancellationToken);
        return await recv_connect(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_connect(global::ZaapProtocol.connect_args request, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp15 = new InternalStructs.connect_args() {
          Request = request,
        };
        
        await tmp15.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::ZaapProtocol.connect_result> recv_connect(CancellationToken cancellationToken = default)
      {
        
        var tmp16 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp16.Type == TMessageType.Exception)
        {
          var tmp17 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp17;
        }

        var tmp18 = new InternalStructs.connect_result();
        await tmp18.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp18.__isset.success)
        {
          return tmp18.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "connect failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["connect"] = connect_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task connect_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp19 = new connect_args();
        await tmp19.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp20 = new connect_result();
        try
        {
          tmp20 = await _iAsync.connect(tmp19, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Reply, seqid), cancellationToken); 
          await tmp20.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp21)
        {
          var tmp22 = $"Error occurred in {GetType().FullName}: {tmp21.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp21, tmp22);
          else
            Console.Error.WriteLine(tmp22);
          var tmp23 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("connect", TMessageType.Exception, seqid), cancellationToken);
          await tmp23.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class connect_args : TBase
      {
        private global::ZaapProtocol.connect_args _request;

        public global::ZaapProtocol.connect_args Request
        {
          get
          {
            return _request;
          }
          set
          {
            __isset.request = true;
            this._request = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool request;
        }

        public connect_args()
        {
        }

        public connect_args DeepCopy()
        {
          var tmp24 = new connect_args();
          if((Request != null) && __isset.request)
          {
            tmp24.Request = (global::ZaapProtocol.connect_args)this.Request.DeepCopy();
          }
          tmp24.__isset.request = this.__isset.request;
          return tmp24;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Request = new global::ZaapProtocol.connect_args();
                    await Request.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp25 = new TStruct("connect_args");
            await oprot.WriteStructBeginAsync(tmp25, cancellationToken);
            var tmp26 = new TField();
            if((Request != null) && __isset.request)
            {
              tmp26.Name = "request";
              tmp26.Type = TType.Struct;
              tmp26.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp26, cancellationToken);
              await Request.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.request == other.__isset.request) && ((!__isset.request) || (global::System.Object.Equals(Request, other.Request))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Request != null) && __isset.request)
            {
              hashcode = (hashcode * 397) + Request.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp27 = new StringBuilder("connect_args(");
          int tmp28 = 0;
          if((Request != null) && __isset.request)
          {
            if(0 < tmp28++) { tmp27.Append(", "); }
            tmp27.Append("Request: ");
            Request.ToString(tmp27);
          }
          tmp27.Append(')');
          return tmp27.ToString();
        }
      }


      public partial class connect_result : TBase
      {
        private global::ZaapProtocol.connect_result _success;

        public global::ZaapProtocol.connect_result Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public connect_result()
        {
        }

        public connect_result DeepCopy()
        {
          var tmp29 = new connect_result();
          if((Success != null) && __isset.success)
          {
            tmp29.Success = (global::ZaapProtocol.connect_result)this.Success.DeepCopy();
          }
          tmp29.__isset.success = this.__isset.success;
          return tmp29;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::ZaapProtocol.connect_result();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp30 = new TStruct("connect_result");
            await oprot.WriteStructBeginAsync(tmp30, cancellationToken);
            var tmp31 = new TField();

            if(this.__isset.success)
            {
              if (Success != null)
              {
                tmp31.Name = "Success";
                tmp31.Type = TType.Struct;
                tmp31.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp31, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is connect_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp32 = new StringBuilder("connect_result(");
          int tmp33 = 0;
          if((Success != null) && __isset.success)
          {
            if(0 < tmp33++) { tmp32.Append(", "); }
            tmp32.Append("Success: ");
            Success.ToString(tmp32);
          }
          tmp32.Append(')');
          return tmp32.ToString();
        }
      }

    }

  }
}
